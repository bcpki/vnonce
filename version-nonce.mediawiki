<pre>
  BIP:
  Title: Extra nonce in block header (vNonce)
  Author: Timo Hanke 
  Status:
  Type: Standards Track
  Created: 2014-07-17
</pre>

==Abstract==

There are incentives for miners to find cheap, non-standard ways to generate new work which are not in the best interest of the protocol.
The proposal eliminates or reduces these incentives by re-assigning 15 bits from the version field of the block header to a new extra nonce field called ''vNonce''.

==Copyright==

This document is placed in the public domain.

==Specification==

The block version number is the 4 byte long field at the beginning of the block header.
This field is shrunk to the first two bytes of the block header and the freed two bytes are assigned to the new extra nonce field (vNonce).

The most significant bit of the vNonce (as a little-endian number) is always zero so that vNonce is effectively 15 bits long.  

The version number of blocks containing a non-zero vNonce is set to 3.  

==Motivation==

The proposal provides miners with a cheap constant-complexity method to create new work that does not require altering the transaction tree.

Furthermore, it protects the version and timestamp fields in the block header from abuse.

==Rationale==

By ''hashing'' we mean the process of hashing the block header over and over again each time with a new entry in the "nonce field" of the header.
When the nonce range is exhausted the miner has to replace the block header by a new one in a process that we call ''pre-hashing''.
Typically pre-hashing is done as follows:
* increment the "extra nonce" field in the coinbase transaction
* hash the coinbase transaction
* re-calculate the left-most branch of the merkle tree all the way to the merkle root.
Pre-hashing is necessary overhead in the mining process besides the hashing itself.

First it should be noted that the relative cost of pre-hashing in the whole mining process depends on the block size.
(At least this is true if pre-hashing is done in the traditional way described above.) 
This may create the unwanted incentive for miners to keep the block size small. 
However, this is not the main motivation for the current proposal.

While hashing happens on ASICs, pre-hashing typically happens on a CPU because of the greater flexibility required.
Consequently, as the cost per hash performance of ASICs drops the relative cost of pre-hashing in the whole mining process increases.
This creates an incentive for miners to find cheaper ways to create new work than by means of the traditional pre-hashing,
and these ways are unlikely to be in the best interest of the protocol.

An example of this currently happening is the on-device rolling of the timestamp into the future.
Timestamp inaccuracy is unwanted (more so on faster blockchains). 
It is unclear what will happen and what kind of incentives are created if time rolling is taken to the extreme where it pushes the protocol's tolerance of 2 hours.

The version number in the block header is another possible target for alteration with the goal of cheaply creating new work.
Currently, blocks with arbitrarily large version numbers get relayed and are accepted by the network.
This is unwanted behaviour and there should not exist any incentive for a miner to abuse the version number in this way. 

The solution is to reduce the range of version numbers from 2^32 to 2^16 and to declare the freed two bytes of the block header as legitimate space for an extra nonce.
This will economically reduce the incentive for a miner to abuse either the timestamp or the shortened version number by a factor of 2^16.

==Backwards Compatibility==

The proposal is implemented without causing or requiring any blockchain forks.

Old nodes (before this BIP) accept all block headers whose first 4 bytes represent a little-endian integer (the version number) greater or equal to 2.
However, since the 4 version bytes are interpreted as a signed integer the most significant bit, which lives in the 4th byte, must be 0.
If it is not then the version number will be interpreted as smaller than 2 (because it is negative) and the block will be rejected.
Therefore we require that the most significant bit of the vNonce (as a little-endian number) is unset.
New nodes explicitly reject blocks which have the highest bit of vNonce set.
This makes the vNonce effectively 15 bits long.  

Old nodes will accept blocks created by new nodes with any 15 bit vNonce,
so old and new nodes can co-exist without any fork happening.
When a majority of the last 100 blocks has a non-zero vNonce then old nodes will create an update alert to the user.

The new block version number 3 is introduced only for informational purposes to make the block creator's intention clearly visible.
There is no code to phase out version 2 blocks.
Strictly speaking it is not necessary to introduce a new version number for this BIP at all. 

==Reference Implementation==

See [https://github.com/bcpki/vnonce github].

Previously the data type of the version was <code>signed int</code> (signed).
Now the data type of version is <code>unsigned short</code> so that the full 16 bits are available for version numbers.
The data type of vNonce is also <code>unsigned short</code>. 

The reference implementation creates new block headers by incrementing vNonce in an inner loop and extraNonce in an outer loop. 
These block headers are served through the GBT protocol.

